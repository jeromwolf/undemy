// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int @id @default(autoincrement())
  phone       Int? @unique
  email       String? @unique
  name        String
  avatar      String?
  level       String @default("G")
  language    String @default("Korean")
  githubUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Tokens      Token[]
  favs        Fav[]
  writtenReviews    Review[] @relation(name: "writtenReviews")
  receivedReviews   Review[] @relation(name: "receivedReviews")
  writtenComments   Comment[] @relation(name: "writtenComments")
  receivedComments  Comment[] @relation(name: "receivedComments")

  authorCourses      Course[] @relation(name: "authorCourses")
  lessions           Lession[]

}

model Token {
  id          Int @id @default(autoincrement())
  payload     String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete:Cascade )
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Sector {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  image       String?
  relatedCourses Course[]
}


model Course {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  title             String
  description       String    @db.MediumText
  language          String    @default("Korean")
  image             String?
  level             String?
  price             Int       @default(0) 
  sector            Sector    @relation(fields: [sectorId], references: [id])
  sectorId          Int

  author            User    @relation(name: "authorCourses", fields: [authorUserId], references: [id], onDelete:Cascade )
  authorUserId      Int

  favs              Fav[]
  reviews           Review[]
  sections          Section[]

  lessions          Lession[]
}



model Section {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  image       String?

  course      Course   @relation(fields: [courseId], references: [id], onDelete:Cascade)
  courseId    Int 

  episodes    Episode[]
}


model Episode {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  section          Section   @relation(fields: [sectionId], references: [id], onDelete:Cascade)
  sectionId        Int 
  comments         Comment[]

  title             String
  imgSrc            String?
  videoSrc          String?
  description       String    @db.MediumText
}

model Comment {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  comment       String   @db.MediumText
  createdBy     User     @relation(name: "writtenComments", fields: [createdById], references: [id], onDelete: Cascade)
  createdById   Int
  createdFor    User     @relation(name: "receivedComments", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId  Int
  episode       Episode  @relation(fields: [episodeId], references: [id], onDelete:Cascade)
  episodeId     Int 
}

model Fav {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId    Int
  course    Course    @relation(fields: [courseId], references: [id], onDelete:Cascade)
  courseId  Int
}


model Review {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  review        String   @db.MediumText
  createdBy     User    @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById   Int
  createdFor    User    @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId  Int
  score         Int
  course        Course   @relation(fields: [courseId], references: [id], onDelete:Cascade)
  courseId      Int
}

model Lession {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  StartDate     DateTime
  EndDate       DateTime

  course        Course   @relation(fields: [courseId], references: [id], onDelete:Cascade)
  courseId      Int

  user          User      @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId        Int 

  status        String

}


